<?php
/**
 * DoctrineAnnotationTemplateView.php
 * Author: Brett Thomas <brett.thomas@gmail.com>
 */
namespace Framework\View\TemplateView;

use Doctrine\ORM\Tools\Setup;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\Driver\AnnotationDriver;
use Doctrine\Common\Annotations\AnnotationReader;
use Doctrine\Common\Annotations\AnnotationRegistry;

use Framework\Controller\FrontController;
use JMS\Serializer\SerializationContext;
use JMS\Serializer\Serializer;
use JMS\Serializer\SerializerBuilder;

$conf = Setup::createAnnotationMetadataConfiguration([__DIR__."/src"], true);
$driver = new AnnotationDriver(new AnnotationReader());

// registering noop annotation autoloader - allow all annotations by default
AnnotationRegistry::registerLoader('class_exists');
$conf->setMetadataDriverImpl($driver);

\Doctrine\Common\Annotations\AnnotationRegistry::registerAutoloadNamespace(
    'JMS\Serializer\Annotation',
    dirname(dirname(dirname(__DIR__))).'/vendor/jms/serializer/src'
);

class DoctrineAnnotationTemplateView extends AbstractBaseTemplateView
{
    /** @var  Serializer $serializer */
    protected $serializer;
    /** @var  string $format */
    protected $format;
    /** @var array $validFormats */
    protected $validFormats = ["json", "xml"];

    public function __construct(Array $config = null)
    {
        parent::__construct($config); // TODO: Change the autogenerated stub
        $this->serializer = SerializerBuilder::create()->build();
        $this->format = "json";
        if(isset($config["format"]) && in_array(strtolower($config["format"]), $this->validFormats)){
            $this->format = strtolower($config["format"]);
        }
    }

    /**
     * Render the view into a string and return for output
     *
     * @param mixed $input
     * @return string
     * @throws \Exception
     */
    public function render($input = null)
    {
        $context = new SerializationContext();
        $context->setSerializeNull(true);
        return $this->serializer->serialize($input, $this->format, $context);
    }

}